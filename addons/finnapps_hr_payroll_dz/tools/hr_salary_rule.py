def prepare_vals_hr_salary_rules(instance):
        
    vals_hr_salary_ruels = [
        {
            'name': 'Heure par jour',
            'sequence': 0,
            'code': 'HJ',
            'active': True,
            'appears_on_payslip': False,
            'category_id': instance.env['finn.hr.salary.rule.category'].search([('code','=','HJ')],limit=1).id,
            'condition_select': 'none',
            'quantity': '173.33 / contract.base_mois',
            'amount_select':'fix',
            'amount_fix': 1,
        },
        {
            'name': 'Salaire de base (mensuel)',
            'sequence': 10,
            'code': 'BASEM',
            'active': True,
            'appears_on_payslip': True,
            'category_id': instance.env['finn.hr.salary.rule.category'].search([('code','=','BASIC')],limit=1).id,
            'condition_select': 'none',
            'quantity': '173.33 / contract.base_mois',
            'amount_select':'code',
            'amount_python_compute': '''conge = 0
if worked_days.CP:
    conge = (contract.wage / contract.base_mois) * worked_days.CP.number_of_days
result = contract.wage - conge''',
        },
        {
            'name': 'Heure par jour',
            'sequence': 0,
            'code': 'HJ',
            'active': True,
            'appears_on_payslip': False,
            'category_id': instance.env['finn.hr.salary.rule.category'].search([('code','=','HJ')],limit=1).id,
            'condition_select': 'none',
            'quantity': '173.33 / contract.base_mois',
            'amount_select':'fix',
            'amount_fix': 1,
        },
        {
            'name': 'Salaire de base (jour)',
            'sequence': 10,
            'code': 'BASEJ',
            'active': True,
            'appears_on_payslip': True,
            'category_id': instance.env['finn.hr.salary.rule.category'].search([('code','=','BASIC')],limit=1).id,
            'condition_select': 'none',
            'amount_select':'code',
            'amount_python_compute': 'result = (contract.wage/contract.base_mois) * worked_days.WORK100.number_of_days',
        },
        {
            'name': 'Salaire de base (heure)',
            'sequence': 10,
            'code': 'BASEH',
            'active': True,
            'appears_on_payslip': True,
            'category_id': instance.env['finn.hr.salary.rule.category'].search([('code','=','BASIC')],limit=1).id,
            'condition_select': 'none',
            'amount_select':'code',
            'amount_python_compute': 'result = ( contract.wage/173.33 ) * worked_days.WORK100.number_of_hours',
        },
        {
            'name': 'Début/Fin de contrat',
            'sequence': 70,
            'code': 'CONTR',
            'category_id': instance.env['finn.hr.salary.rule.category'].search([('code','=','BASIC')],limit=1).id,
            'condition_select': 'python',
            'condition_python': 'result=worked_days.CONTR and worked_days.CONTR.number_of_days or 0',
            'amount_select':'code',
            'amount_python_compute': 'result=-(contract.wage / contract.base_mois) * worked_days.CONTR.number_of_days',
        },
        {
            'name': 'Absence jour',
            'sequence': 80,
            'code': 'ABSJ',
            'active': True,
            'appears_on_payslip': True,
            'category_id': instance.env['finn.hr.salary.rule.category'].search([('code','=','BASIC')],limit=1).id,
            'condition_select': 'python',
            'condition_python': 'result=worked_days.ABS and worked_days.ABS.number_of_days or 0',
            'amount_select':'code',
            'amount_python_compute': 'result = -(contract.wage / contract.base_mois) * worked_days.ABS.number_of_days',
        },
        {
            'name': 'Absence heure',
            'sequence': 90,
            'code': 'ABSH',
            'active': True,
            'appears_on_payslip': True,
            'category_id': instance.env['finn.hr.salary.rule.category'].search([('code','=','BASIC')],limit=1).id,
            'condition_select': 'python',
            'condition_python': 'result=worked_days.ABSH and worked_days.ABSH.number_of_hours or 0',
            'amount_select':'code',
            'amount_python_compute': 'result = -(contract.wage / 173.33) * worked_days.ABSH.number_of_hours',
        },
        {
            'name': 'Impayé',
            'sequence': 92,
            'code': 'IM',
            'active': True,
            'appears_on_payslip': True,
            'category_id': instance.env['finn.hr.salary.rule.category'].search([('code','=','BASIC')],limit=1).id,
            'condition_select': 'python',
            'condition_python': 'result=worked_days.IM and worked_days.IM.number_of_hours or 0',
            'amount_select':'code',
            'amount_python_compute': 'result = -(contract.wage / 173.33) * worked_days.IM.number_of_hours',
        },
        {
            'name': 'Coefficient prorata mensuel',
            'sequence': 130,
            'code': 'COEFM',
            'active': True,
            'appears_on_payslip': True,
            'category_id': instance.env['finn.hr.salary.rule.category'].search([('code','=','COEFF')],limit=1).id,
            'condition_select': 'none',
            'amount_select':'code',
            'amount_python_compute': 'result = ( worked_days.WORK100.number_of_days * categories.HJ /173.33) + (worked_days.CP.number_of_days if worked_days.CP else 0 )  / contract.base_mois',
        },
        {
            'name': 'Coefficient prorata jour',
            'sequence': 130,
            'code': 'COEFJ',
            'active': True,
            'appears_on_payslip': True,
            'category_id': instance.env['finn.hr.salary.rule.category'].search([('code','=','COEFF')],limit=1).id,
            'condition_select': 'none',
            'amount_select':'code',
            'amount_python_compute': 'result = ( worked_days.WORK100.number_of_days / contract.base_mois ) + ( worked_days.CP.number_of_days if worked_days.CP else 0 )  / contract.base_mois',
        },
        {
            'name': 'Coefficient prorata heure',
            'sequence': 130,
            'code': 'COEFH',
            'active': True,
            'appears_on_payslip': True,
            'category_id': instance.env['finn.hr.salary.rule.category'].search([('code','=','COEFF')],limit=1).id,
            'condition_select': 'none',
            'amount_select':'code',
            'amount_python_compute': 'result = ( worked_days.WORK100.number_of_hours / 173.33 ) + ( worked_days.CP.number_of_days if worked_days.CP else 0 )  / contract.base_mois',
        },
        {
            'name': 'I.E.P',
            'sequence': 140,
            'code': 'IEP',
            'active': True,
            'appears_on_payslip': True,
            'category_id': instance.env['finn.hr.salary.rule.category'].search([('code','=','COT')],limit=1).id,
            'condition_select': 'python',
            'condition_python': 'result = contract.iep',
            'amount_select':'code',
            'amount_python_compute': '''d_end = payslip.date_to
d_start = contract.date_start
diff = d_end - d_start
diff_years = (diff.days) / 365
total_years = diff_years + contract.exp_prec

if contract.iep:
    if total_years >= contract.iep.year_application:
        pour_centage = (int(total_years / contract.iep.year) * contract.iep.taux / 100)
        if pour_centage <= 0.6:
            iep_pourcentage = pour_centage
        else:
            iep_pourcentage = 0.6
    else:
        iep_pourcentage = 0
result = iep_pourcentage * (categories.BASIC if worked_days.WORK100.number_of_days  != 0 else 0)
''',
        },
        {
            'name': 'Prime responsabilité',
            'sequence': 150,
            'code': 'PRR',
            'active': True,
            'appears_on_payslip': True,
            'category_id': instance.env['finn.hr.salary.rule.category'].search([('code','=','COT')],limit=1).id,
            'condition_select': 'python',
            'condition_python': 'result=inputs.PRR and inputs.PRR.amount or False',
            'amount_select':'percentage',
            'amount_percentage_base': 'inputs.PRR.amount',
            'quantity': 'worked_days.WORK100.number_of_days + ( worked_days.CP.number_of_days if worked_days.CP else 0)',
            'amount_percentage': 100,
        },
        {
            'name': 'Prime de caisse',
            'sequence': 155,
            'code': 'CAIS',
            'active': True,
            'appears_on_payslip': True,
            'category_id': instance.env['finn.hr.salary.rule.category'].search([('code','=','COT')],limit=1).id,
            'condition_select': 'python',
            'condition_python': 'result=inputs.CAIS and inputs.CAIS.amount or False',
            'amount_select':'percentage',
            'amount_percentage_base': 'inputs.CAIS.amount',
            'quantity': 'worked_days.WORK100.number_of_days + (worked_days.CP.number_of_days if worked_days.CP else 0)',
            'amount_percentage': 100,
        },
        {
            'name': 'Régularisation de prime de caisse',
            'sequence': 156,
            'code': 'R_CAIS',
            'active': True,
            'appears_on_payslip': True,
            'id_regul_rule': True,
            'category_id': instance.env['finn.hr.salary.rule.category'].search([('code','=','COT')],limit=1).id,
            'condition_select': 'python',
            'condition_python': 'result=inputs.R_CAIS and inputs.R_CAIS.amount or False',
            'amount_select':'percentage',
            'amount_percentage_base': 'inputs.R_CAIS.amount',
            'quantity': '1',
            'amount_percentage': 100,
        },
        {
            'name': 'Prime de nuisance',
            'sequence': 160,
            'code': 'NUIS',
            'active': True,
            'appears_on_payslip': True,
            'category_id': instance.env['finn.hr.salary.rule.category'].search([('code','=','COT')],limit=1).id,
            'condition_select': 'python',
            'condition_python': 'result=inputs.NUIS and inputs.NUIS.amount or False',
            'amount_select':'percentage',
            'amount_percentage_base': 'inputs.NUIS.amount',
            'quantity': 'worked_days.WORK100.number_of_days + (worked_days.CP.number_of_days if worked_days.CP else 0)',
            'amount_percentage': 100,
        },
        {
            'name': 'Prime de maître d\'apprentissage',
            'sequence': 165,
            'code': 'APRN',
            'active': True,
            'appears_on_payslip': True,
            'category_id': instance.env['finn.hr.salary.rule.category'].search([('code','=','COT')],limit=1).id,
            'condition_select': 'python',
            'condition_python': 'result=inputs.APRN and inputs.APRN.amount or False',
            'amount_select':'percentage',
            'amount_percentage_base': 'inputs.APRN.amount',
            'quantity': 'worked_days.WORK100.number_of_days + (worked_days.CP.number_of_days if worked_days.CP else 0)',
            'amount_percentage': 100,
        },
        {
            'name': 'Régularisation de prime de maître d\'apprentissage',
            'sequence': 166,
            'code': 'R_APRN',
            'active': True,
            'appears_on_payslip': True,
            'id_regul_rule': True,
            'category_id': instance.env['finn.hr.salary.rule.category'].search([('code','=','COT')],limit=1).id,
            'condition_select': 'python',
            'condition_python': 'result=inputs.R_APRN and inputs.R_APRN.amount or False',
            'amount_select':'percentage',
            'amount_percentage_base': 'inputs.R_APRN.amount',
            'quantity': '1',
            'amount_percentage': 100,
        },
        {
            'name': 'Prime de danger',
            'sequence': 170,
            'code': 'DANG',
            'active': True,
            'appears_on_payslip': True,
            'category_id': instance.env['finn.hr.salary.rule.category'].search([('code','=','COT')],limit=1).id,
            'condition_select': 'python',
            'condition_python': 'result=inputs.DANG and inputs.DANG.amount or False',
            'amount_select':'percentage',
            'amount_percentage_base': 'inputs.DANG.amount',
            'quantity': 'worked_days.WORK100.number_of_days + (worked_days.CP.number_of_days if worked_days.CP else 0)',
            'amount_percentage': 100,
        },
        {
            'name': 'Prime de rendement individuel',
            'sequence': 180,
            'code': 'PRI',
            'active': True,
            'appears_on_payslip': True,
            'category_id': instance.env['finn.hr.salary.rule.category'].search([('code','=','COT')],limit=1).id,
            'condition_select': 'python',
            'condition_python': 'result=inputs.PRI and inputs.PRI.amount or False',
            'amount_select':'code',
            'amount_python_compute': 'result = inputs.PRI.amount',       
        },
        {
            'name': 'Indemnité Changement de Résidence',
            'sequence': 190,
            'code': 'ICR',
            'active': True,
            'appears_on_payslip': True,
            'category_id': instance.env['finn.hr.salary.rule.category'].search([('code','=','COT')],limit=1).id,
            'condition_select': 'python',
            'condition_python': 'result=inputs.ICR and inputs.ICR.amount or False',
            'amount_select':'code',
            'amount_python_compute': 'result = inputs.ICR.amount',
        },
        {
            'name': 'Congé Payé',
            'sequence': 200,
            'code': 'CP',
            'active': True,
            'appears_on_payslip': True,
            'category_id': instance.env['finn.hr.salary.rule.category'].search([('code','=','COT')],limit=1).id,
            'condition_select': 'python',
            'condition_python': 'result=worked_days.CP and worked_days.CP.number_of_days or 0',
            'amount_select':'code',
            'amount_python_compute': 'result = payslip.leave_used_amount',
        },
        {
            'name': 'Indemnité de congé STC',
            'code': 'STC',
            'active': True,
            'sequence': 292,
            'category_id': instance.env['finn.hr.salary.rule.category'].search([('code','=','COT')],limit=1).id,
            'condition_select': 'python',
            'condition_python': 'result = payslip.all_accounts_balance',
            'amount_select':'code',
            'amount_python_compute':'result = payslip.total_holiday_pay',
            'appears_on_payslip': True,
        },
        {
            'name': 'Congé maladie',
            'sequence': 110,
            'code': 'UCM',
            'active': True,
            'appears_on_payslip': True,
            'category_id': instance.env['finn.hr.salary.rule.category'].search([('code','=','BASIC')],limit=1).id,
            'condition_select': 'python',
            'condition_python': 'result=worked_days.CM and worked_days.CM.number_of_days or 0',
            'amount_select':'code',
            'amount_python_compute': 'result = -(contract.wage/contract.base_mois ) *worked_days.CM.number_of_days',
        },
        {
            'name': 'Congé maternité',
            'sequence': 120,
            'code': 'MM',
            'active': True,
            'appears_on_payslip': True,
            'category_id': instance.env['finn.hr.salary.rule.category'].search([('code','=','BASIC')],limit=1).id,
            'condition_select': 'python',
            'condition_python': 'result=worked_days.MM and worked_days.MM.number_of_days or 0',
            'amount_select':'code',
            'amount_python_compute': 'result = (-contract.wage/contract.base_mois ) * worked_days.MM.number_of_days',
        },
        {
            'name': 'Salaire (Base Indemnités)',
            'sequence': 135,
            'code': 'BASEINT',
            'active': True,
            'appears_on_payslip': True,
            'category_id': instance.env['finn.hr.salary.rule.category'].search([('code','=','INTERM')],limit=1).id,
            'condition_select': 'none',
            'amount_select':'code',
            'amount_python_compute': 'result = categories.BASIC if worked_days.WORK100.number_of_days  != 0 else 0',
        },
        {
            'name': 'HEUR SUP 50%',
            'sequence': 260,
            'code': 'HS50',
            'active': True,
            'appears_on_payslip': True,
            'category_id': instance.env['finn.hr.salary.rule.category'].search([('code','=','COT')],limit=1).id,
            'condition_select': 'python',
            'condition_python': 'result=inputs.HS50 and inputs.HS50.amount or False',
            'amount_select':'percentage',
            'amount_percentage_base': 'contract.wage / 173.33',
            'quantity': 'inputs.HS50.amount',
            'amount_percentage': 150,
        },
        {
            'name': 'HEUR SUP 75%',
            'sequence': 270,
            'code': 'HS75',
            'active': True,
            'appears_on_payslip': True,
            'category_id': instance.env['finn.hr.salary.rule.category'].search([('code','=','COT')],limit=1).id,
            'condition_select': 'python',
            'condition_python': 'result=inputs.HS75 and inputs.HS75.amount or False',
            'amount_select':'percentage',
            'amount_percentage_base': 'contract.wage / 173.33',
            'quantity': 'inputs.HS75.amount',
            'amount_percentage': 175,
        },
        {
            'name': 'HEUR SUP 100%',
            'sequence': 280,
            'code': 'HS100',
            'active': True,
            'appears_on_payslip': True,
            'category_id': instance.env['finn.hr.salary.rule.category'].search([('code','=','COT')],limit=1).id,
            'condition_select': 'python',
            'condition_python': 'result=inputs.HS100 and inputs.HS100.amount or False',
            'amount_select':'percentage',
            'amount_percentage_base': 'contract.wage / 173.33',
            'quantity': 'inputs.HS100.amount',
            'amount_percentage': 200,
        },
        {
            'name': 'Indemnité de congé',
            'sequence': 290,
            'code': 'INDC',
            'active': True,
            'appears_on_payslip': True,
            'category_id': instance.env['finn.hr.salary.rule.category'].search([('code','=','COT')],limit=1).id,
            'condition_select': 'python',
            'condition_python': 'result=inputs.INDC and inputs.INDC.amount or False',
            'amount_select':'percentage',
            'amount_percentage_base': 'inputs.INDC.amount',
            'quantity': '1',
            'amount_percentage': 100,
        },
        {
            'name': 'Indemnité de congé STC',
            'code': 'STC',
            'active': True,
            'sequence': 292,
            'category_id': instance.env['finn.hr.salary.rule.category'].search([('code','=','COT')],limit=1).id,
            'condition_select': 'python',
            'condition_python': 'result=payslip.all_accounts_balance',
            'amount_select':'code',
            'amount_python_compute':'result = payslip.total_holiday_pay',
            'appears_on_payslip': True,
        },
        {
            'name': 'I.F.S.P',
            'sequence': 300,
            'code': 'IFSP',
            'active': True,
            'appears_on_payslip': True,
            'category_id': instance.env['finn.hr.salary.rule.category'].search([('code','=','COT')],limit=1).id,
            'condition_select': 'python',
            'condition_python': 'result=inputs.IFSP and inputs.IFSP.amount or False',
            'amount_select':'percentage',
            'amount_percentage_base': 'inputs.IFSP.amount',
            'quantity': 'worked_days.WORK100.number_of_days + (worked_days.CP.number_of_days if worked_days.CP else 0)',
            'amount_percentage': 100,
        },
        {
            'name': 'I.F.S',
            'sequence': 310,
            'code': 'IFS',
            'active': True,
            'appears_on_payslip': True,
            'category_id': instance.env['finn.hr.salary.rule.category'].search([('code','=','COT')],limit=1).id,
            'condition_select': 'python',
            'condition_python': 'result=inputs.IFS and inputs.IFS.amount or False',
            'amount_select':'percentage',
            'amount_percentage_base': 'inputs.IFS.amount',
            'quantity': 'worked_days.WORK100.number_of_days + (worked_days.CP.number_of_days if worked_days.CP else 0)',
            'amount_percentage': 100,
        },
        {
            'name': 'Indemnité travail posté à 10% (05h à 21h)',
            'sequence': 320,
            'code': 'TRPST10',
            'active': True,
            'appears_on_payslip': True,
            'category_id': instance.env['finn.hr.salary.rule.category'].search([('code','=','COT')],limit=1).id,
            'condition_select': 'python',
            'condition_python': 'result=inputs.TRPST10 and inputs.TRPST10.amount or False',
            'amount_select':'percentage',
            'amount_percentage_base': 'inputs.TRPST10.amount',
            'quantity': '1',
            'amount_percentage': 100,
        },
        {
            'name': 'Indemnité travail posté à 10% + 5% (21h à 00h)',
            'sequence': 330,
            'code': 'TRPST15',
            'active': True,
            'appears_on_payslip': True,
            'category_id': instance.env['finn.hr.salary.rule.category'].search([('code','=','COT')],limit=1).id,
            'condition_select': 'python',
            'condition_python': 'result=inputs.TRPST15 and inputs.TRPST15.amount or False',
            'amount_select':'percentage',
            'amount_percentage_base': 'inputs.TRPST15.amount',
            'quantity': '1',
            'amount_percentage': 100,
        },
        {
            'name': 'Indemnité travail posté à 10% + 15% (00h à 15h)',
            'sequence': 340,
            'code': 'TRPST25',
            'active': True,
            'appears_on_payslip': True,
            'category_id': instance.env['finn.hr.salary.rule.category'].search([('code','=','COT')],limit=1).id,
            'condition_select': 'python',
            'condition_python': 'result=inputs.TRPST25 and inputs.TRPST25.amount or False',
            'amount_select':'percentage',
            'amount_percentage_base': 'inputs.TRPST25.amount',
            'quantity': '1',
            'amount_percentage': 100,
        },
        {
            'name': 'Indemnité d\'astreinte et de disponibilité permanent',
            'sequence': 350,
            'code': 'ASTR',
            'active': True,
            'appears_on_payslip': True,
            'category_id': instance.env['finn.hr.salary.rule.category'].search([('code','=','COT')],limit=1).id,
            'condition_select': 'python',
            'condition_python': 'result=inputs.ASTR and inputs.ASTR.amount or False',
            'amount_select':'percentage',
            'amount_percentage_base': 'inputs.ASTR.amount',
            'quantity': 'worked_days.WORK100.number_of_days + (worked_days.CP.number_of_days if worked_days.CP else 0)',
            'amount_percentage': 100,
        },
        {
            'name': 'Indemnité des activités d\'enseignement',
            'sequence': 360,
            'code': 'ENSG',
            'active': True,
            'appears_on_payslip': True,
            'category_id': instance.env['finn.hr.salary.rule.category'].search([('code','=','COT')],limit=1).id,
            'condition_select': 'python',
            'condition_python': 'result=inputs.ENSG and inputs.ENSG.amount or False',
            'amount_select':'percentage',
            'amount_percentage_base': 'inputs.ENSG.amount',
            'quantity': 'worked_days.WORK100.number_of_days + (worked_days.CP.number_of_days if worked_days.CP else 0)',
            'amount_percentage': 100,
        },
        {
            'name': 'Indemnité de gestion et de responsabilité',
            'sequence': 370,
            'code': 'GESRES',
            'active': True,
            'appears_on_payslip': True,
            'category_id': instance.env['finn.hr.salary.rule.category'].search([('code','=','COT')],limit=1).id,
            'condition_select': 'python',
            'condition_python': 'result=inputs.GESRES and inputs.GESRES.amount or False',
            'amount_select':'percentage',
            'amount_percentage_base': 'inputs.GESRES.amount',
            'quantity': 'worked_days.WORK100.number_of_days + (worked_days.CP.number_of_days if worked_days.CP else 0)',
            'amount_percentage': 100,
        },
        {
            'name': 'Indemnité des activités de contrôle',
            'sequence': 380,
            'code': 'ACTR',
            'active': True,
            'appears_on_payslip': True,
            'category_id': instance.env['finn.hr.salary.rule.category'].search([('code','=','COT')],limit=1).id,
            'condition_select': 'python',
            'condition_python': 'result=inputs.ACTR and inputs.ACTR.amount or False',
            'amount_select':'percentage',
            'amount_percentage_base': 'inputs.ACTR.amount',
            'quantity': 'worked_days.WORK100.number_of_days + (worked_days.CP.number_of_days if worked_days.CP else 0)',
            'amount_percentage': 100,
        },
        {
            'name': 'Régularisation d\'indemnité des activités de contrôle',
            'sequence': 381,
            'code': 'R_ACTR',
            'active': True,
            'appears_on_payslip': True,
            'id_regul_rule': True,
            'category_id': instance.env['finn.hr.salary.rule.category'].search([('code','=','COT')],limit=1).id,
            'condition_select': 'python',
            'condition_python': 'result=inputs.R_ACTR and inputs.R_ACTR.amount or False',
            'amount_select':'percentage',
            'amount_percentage_base': 'inputs.R_ACTR.amount',
            'quantity': '1',
            'amount_percentage': 100,
        },
        {
            'name': 'Indemnité de documentation',
            'sequence': 390,
            'code': 'DOCU',
            'active': True,
            'appears_on_payslip': True,
            'category_id': instance.env['finn.hr.salary.rule.category'].search([('code','=','COT')],limit=1).id,
            'condition_select': 'python',
            'condition_python': 'result=inputs.DOCU and inputs.DOCU.amount or False',
            'amount_select':'percentage',
            'amount_percentage_base': 'inputs.DOCU.amount',
            'quantity': 'categories.COEFF',
            'amount_percentage': 100,
        },
        {
            'name': 'Régularisation d\'indemnité de documentation',
            'sequence': 391,
            'code': 'R_DOCU',
            'active': True,
            'appears_on_payslip': True,
            'id_regul_rule': True,
            'category_id': instance.env['finn.hr.salary.rule.category'].search([('code','=','COT')],limit=1).id,
            'condition_select': 'python',
            'condition_python': 'result=inputs.R_DOCU and inputs.R_DOCU.amount or False',
            'amount_select':'percentage',
            'amount_percentage_base': 'inputs.R_DOCU.amount',
            'quantity': '1',
            'amount_percentage': 100,
        },
        {
            'name': 'Indemnité de suivi et d\'inspection',
            'sequence': 400,
            'code': 'INSPC',
            'active': True,
            'appears_on_payslip': True,
            'category_id': instance.env['finn.hr.salary.rule.category'].search([('code','=','COT')],limit=1).id,
            'condition_select': 'python',
            'condition_python': 'result=inputs.INSPC and inputs.INSPC.amount or False',
            'amount_select':'percentage',
            'amount_percentage_base': 'inputs.INSPC.amount',
            'quantity': 'worked_days.WORK100.number_of_days + (worked_days.CP.number_of_days if worked_days.CP else 0)',
            'amount_percentage': 100,
        },
        {
            'name': 'Régularisation d\'indemnité de suivi et d\'inspection',
            'sequence': 401,
            'code': 'R_INSPC',
            'active': True,
            'appears_on_payslip': True,
            'id_regul_rule': True,
            'category_id': instance.env['finn.hr.salary.rule.category'].search([('code','=','COT')],limit=1).id,
            'condition_select': 'python',
            'condition_python': 'result=inputs.R_INSPC and inputs.R_INSPC.amount or False',
            'amount_select':'percentage',
            'amount_percentage_base': 'inputs.R_INSPC.amount',
            'quantity': '1',
            'amount_percentage': 100,
        },
        {
            'name': 'Avance sur salaire',
            'sequence': 410,
            'code': 'AVSAL',
            'active': False,
            'appears_on_payslip': True,
            'category_id': instance.env['finn.hr.salary.rule.category'].search([('code','=','COT')],limit=1).id,
            'condition_select': 'python',
            'condition_python': 'result=inputs.AVSAL and inputs.AVSAL.amount or False',
            'amount_select':'percentage',
            'amount_percentage_base': 'inputs.AVSAL.amount',
            'quantity': '1',
            'amount_percentage': 100,
        },
        {
            'name': 'Régularisation d\'avance sur salaire',
            'sequence': 411,
            'code': 'R_AVSAL',
            'active': False,
            'appears_on_payslip': True,
            'id_regul_rule': True,
            'category_id': instance.env['finn.hr.salary.rule.category'].search([('code','=','COT')],limit=1).id,
            'condition_select': 'python',
            'condition_python': 'result=inputs.R_AVSAL and inputs.R_AVSAL.amount or False',
            'amount_select':'percentage',
            'amount_percentage_base': 'inputs.R_AVSAL.amount',
            'quantity': '1',
            'amount_percentage': 100,
        },
        {
            'name': 'Indemnité de départ volontaire',
            'sequence': 500,
            'code': 'IDV15',
            'active': True,
            'appears_on_payslip': True,
            'category_id': instance.env['finn.hr.salary.rule.category'].search([('code','=','IMP15')],limit=1).id,
            'condition_select': 'python',
            'condition_python': 'result=inputs.IDV15 and inputs.IDV15.amount or False',
            'amount_select':'percentage',
            'amount_percentage_base': 'inputs.IDV15.amount',
            'quantity': '1',
            'amount_percentage': 100,
        },
        {
            'name': 'Régularisation d\'indemnité de départ volontaire',
            'sequence': 501,
            'code': 'R_IDV15',
            'active': True,
            'appears_on_payslip': True,
            'id_regul_rule': True,
            'category_id': instance.env['finn.hr.salary.rule.category'].search([('code','=','IMP15')],limit=1).id,
            'condition_select': 'python',
            'condition_python': 'result=inputs.R_IDV15 and inputs.R_IDV15.amount or False',
            'amount_select':'percentage',
            'amount_percentage_base': 'inputs.R_IDV15.amount',
            'quantity': '1',
            'amount_percentage': 100,
            
        },
        {
            'name': 'Prime de téléphone',
            'sequence': 460,
            'code': 'TEL',
            'active': True,
            'appears_on_payslip': True,
            'category_id': instance.env['finn.hr.salary.rule.category'].search([('code','=','IMP')],limit=1).id,
            'condition_select': 'python',
            'condition_python': 'result=inputs.TEL and inputs.TEL.amount or False',
            'amount_select':'percentage',
            'amount_percentage_base': 'inputs.TEL.amount',
            'quantity': 'worked_days.WORK100.number_of_days / contract.base_mois',
            'amount_percentage': 100,
        },
        {
            'name': 'Régularisation de prime de téléphone',
            'sequence': 461,
            'code': 'R_TEL',
            'active': True,
            'appears_on_payslip': True,
            'id_regul_rule': True,
            'category_id': instance.env['finn.hr.salary.rule.category'].search([('code','=','IMP')],limit=1).id,
            'condition_select': 'python',
            'condition_python': 'result=inputs.R_TEL and inputs.R_TEL.amount or False',
            'amount_select':'percentage',
            'amount_percentage_base': 'inputs.R_TEL.amount',
            'quantity': '1',
            'amount_percentage': 100,
        },
        {
            'name': 'Frais de restauration',
            'sequence': 640,
            'code': 'RESTO',
            'active': True,
            'appears_on_payslip': True,
            'category_id': instance.env['finn.hr.salary.rule.category'].search([('code','=','ALW')],limit=1).id,
            'condition_select': 'python',
            'condition_python': 'result=inputs.RESTO and inputs.RESTO.amount or False',
            'amount_select':'percentage',
            'amount_percentage_base': 'inputs.RESTO.amount',
            'quantity': '1',
            'amount_percentage': 100,
        },
        {
            'name': 'Régularisation de frais de restauration',
            'sequence': 641,
            'code': 'R_RESTO',
            'active': True,
            'appears_on_payslip': True,
            'id_regul_rule': True,
            'category_id': instance.env['finn.hr.salary.rule.category'].search([('code','=','ALW')],limit=1).id,
            'condition_select': 'python',
            'condition_python': 'result=inputs.R_RESTO and inputs.R_RESTO.amount or False',
            'amount_select':'percentage',
            'amount_percentage_base': 'inputs.R_RESTO.amount',
            'quantity': '1',
            'amount_percentage': 100,
        },
        {
            'name': 'Salaire de poste',
            'sequence': 420,
            'code': 'BCOT',
            'active': True,
            'appears_on_payslip': True,
            'category_id': instance.env['finn.hr.salary.rule.category'].search([('code','=','INTERM')],limit=1).id,
            'condition_select': 'none',
            'amount_select':'percentage',
            'amount_percentage_base': '(categories.BASIC + categories.ALW ) if worked_days.WORK100.number_of_days != 0 else 0',
            'quantity': '1',
            'amount_percentage': 100,
        },
        {
            'name': 'Sécurité Sociale',
            'sequence': 430,
            'code': 'SS',
            'active': True,
            'appears_on_payslip': True,
            'category_id': instance.env['finn.hr.salary.rule.category'].search([('code','=','DED')],limit=1).id,
            'condition_select': 'none',
            'amount_select':'percentage',
            'amount_percentage_base': '-(categories.BASIC + categories.COT + categories.DED) if worked_days.WORK100.number_of_days != 0 else 0',
            'quantity': '1',
            'amount_percentage': 9,
        },
        {
            'name': 'Régularisation de sécurité Sociale',
            'sequence': 431,
            'code': 'R_SS',
            'active': True,
            'appears_on_payslip': True,
            'id_regul_rule': True,
            'category_id': instance.env['finn.hr.salary.rule.category'].search([('code','=','DED')],limit=1).id,
            'condition_select': 'python',
            'condition_python': 'result=inputs.R_SS and inputs.R_SS.amount or False',
            'amount_select':'percentage',
            'amount_percentage_base': '-inputs.R_SS.amount',
            'quantity': '1',
            'amount_percentage': 100,
        },
        {
            'name': 'Cacobath',
            'sequence': 440,
            'code': 'BATH',
            'active': True,
            'appears_on_payslip': True,
            'category_id': instance.env['finn.hr.salary.rule.category'].search([('code','=','DED')],limit=1).id,
            'condition_select': 'python',
            'condition_python': 'result= employee.cacobath or False',
            'amount_select':'percentage',
            'amount_percentage_base': '-(categories.BASIC + categories.ALW)',
            'quantity': '37.5',
            'amount_percentage': 0.01,
        },
        {
            'name': 'Régularisation de cacobath',
            'sequence': 441,
            'code': 'R_BATH',
            'active': True,
            'appears_on_payslip': True,
            'id_regul_rule': True,
            'category_id': instance.env['finn.hr.salary.rule.category'].search([('code','=','DED')],limit=1).id,
            'condition_select': 'python',
            'condition_python': 'result=inputs.R_BATH and inputs.R_BATH.amount or False',
            'amount_select':'percentage',
            'amount_percentage_base': 'inputs.R_BATH.amount',
            'quantity': '1',
            'amount_percentage': 100,
        },
        {
            'name': 'Indemnité de Panier',
            'sequence': 470,
            'code': 'IPAN',
            'active': True,
            'appears_on_payslip': True,
            'category_id': instance.env['finn.hr.salary.rule.category'].search([('code','=','IMP')],limit=1).id,
            'condition_select': 'python',
            'condition_python': 'result=inputs.IPAN and inputs.IPAN.amount or False',
            'amount_select':'percentage',
            'amount_percentage_base': 'inputs.IPAN.amount',
            'quantity': 'worked_days.WORK100.number_of_days',
            'amount_percentage': 100,
        },
        {
            'name': 'Régularisation d\'indemnité de Panier',
            'sequence': 471,
            'code': 'R_IPAN',
            'active': True,
            'appears_on_payslip': True,
            'id_regul_rule': True,
            'category_id': instance.env['finn.hr.salary.rule.category'].search([('code','=','IMP')],limit=1).id,
            'condition_select': 'python',
            'condition_python': 'result=inputs.R_IPAN and inputs.R_IPAN.amount or False',
            'amount_select':'percentage',
            'amount_percentage_base': 'inputs.R_IPAN.amount',
            'quantity': '1',
            'amount_percentage': 100,
        },
        {
            'name': 'Indemnité de Transport',
            'sequence': 480,
            'code': 'ITRS',
            'active': True,
            'appears_on_payslip': True,
            'category_id': instance.env['finn.hr.salary.rule.category'].search([('code','=','IMP')],limit=1).id,
            'condition_select': 'python',
            'condition_python': 'result=inputs.ITRS and inputs.ITRS.amount or False',
            'amount_select':'percentage',
            'amount_percentage_base': 'inputs.ITRS.amount',
            'quantity': 'worked_days.WORK100.number_of_days',
            'amount_percentage': 100,
        },
        {
            'name': 'Régularisation d\'indemnité de Transport',
            'sequence': 481,
            'code': 'R_ITRS',
            'active': True,
            'appears_on_payslip': True,
            'id_regul_rule': True,
            'category_id': instance.env['finn.hr.salary.rule.category'].search([('code','=','IMP')],limit=1).id,
            'condition_select': 'python',
            'condition_python': 'result=inputs.R_ITRS and inputs.R_ITRS.amount or False',
            'amount_select':'percentage',
            'amount_percentage_base': 'inputs.R_ITRS.amount',
            'quantity': '1',
            'amount_percentage': 100,
        },
        {
            'name': 'Salaire de base imposable IRG/mois',
            'sequence': 530,
            'code': 'SBI',
            'active': True,
            'appears_on_payslip': True,
            'category_id': instance.env['finn.hr.salary.rule.category'].search([('code','=','INTERM')],limit=1).id,
            'condition_select': 'none',
            'amount_select':'percentage',
            'amount_percentage_base': '(categories.BASIC + categories.COT + categories.IMP + categories.DED) if worked_days.WORK100.number_of_days != 0 else 0',
            'quantity': '1',
            'amount_percentage': 100,
        },
        {
            'name': 'Impot sur le revenus global (IRG)',
            'sequence': 540,
            'code': 'IRG',
            'active': True,
            'appears_on_payslip': True,
            'category_id': instance.env['finn.hr.salary.rule.category'].search([('code','=','DED')],limit=1).id,
            'condition_select': 'none',
            'amount_select':'code',
            'amount_python_compute': '''salaire_mensuel = categories.BASIC + categories.COT + categories.DED +  categories.IMP

conge_day = worked_days.CP.number_of_days if  worked_days.CP else 0

CONTR_day = worked_days.CONTR.number_of_days if  worked_days.CONTR else 0

if  contract.base_mois  != worked_days.WORK100.number_of_days and worked_days.WORK100.number_of_days != 0 :
    salaire_mensuel = salaire_mensuel * (contract.base_mois - CONTR_day) / (worked_days.WORK100.number_of_days + conge_day)


tt_irg = 0
if salaire_mensuel < 30000:
    tt_irg = 0
elif salaire_mensuel < 40000:
    tt_irg = (salaire_mensuel - 20000) * 0.23
elif salaire_mensuel < 80000:
    tt_irg = 4600 + (salaire_mensuel - 40000) * 0.27
elif salaire_mensuel < 160000:
    tt_irg = 15400 + (salaire_mensuel - 80000) * 0.30
elif salaire_mensuel < 320000:
    tt_irg = 39400 + (salaire_mensuel - 160000) * 0.33
elif salaire_mensuel > 320000:
    tt_irg = 92200 +  (salaire_mensuel - 320000) * 0.35


# ABATTEMEMNT 1
abat_irg = tt_irg * 0.4
if abat_irg < 1000:
    abat_irg = 1000
elif abat_irg > 1500:
    abat_irg = 1500
tt_irg -= abat_irg

if tt_irg < 0:
    tt_irg = 0

# ABATTEMEMNT 2
if salaire_mensuel > 30000 and salaire_mensuel < 35000:
    tt_irg = tt_irg * (137 / 51) - (27925 / 8)

# ABATTEMEMNT 3
if employee.disabled_or_retirement == True:
    if salaire_mensuel > 30000 and salaire_mensuel < 42500:
        tt_irg = tt_irg * (93 / 61) - (81213 / 41)
    
if  contract.base_mois  != worked_days.WORK100.number_of_days:
    tt_irg = tt_irg * worked_days.WORK100.number_of_days / (contract.base_mois - CONTR_day)

result = -(tt_irg)''',
        },
        {
            'name': 'Régularisation d\'impot sur le revenus global (IRG)',
            'sequence': 541,
            'code': 'R_IRG',
            'active': True,
            'appears_on_payslip': True,
            'id_regul_rule': True,
            'category_id': instance.env['finn.hr.salary.rule.category'].search([('code','=','DED')],limit=1).id,
            'condition_select': 'python',
            'condition_python': 'result=inputs.R_IRG and inputs.R_IRG.amount or False',
            'amount_select':'percentage',
            'amount_percentage_base': '-inputs.R_IRG.amount',
            'quantity': '1',
            'amount_percentage': 100,
        },
        {
            'name': 'IRG 10%',
            'sequence': 570,
            'code': 'IRG10',
            'active': True,
            'appears_on_payslip': True,
            'category_id': instance.env['finn.hr.salary.rule.category'].search([('code','=','DED')],limit=1).id,
            'condition_select': 'python',
            'condition_python': 'result= categories.IMP10 or False',
            'amount_select':'percentage',
            'amount_percentage_base': '-categories.IMP10',
            'quantity': '1',
            'amount_percentage': 10,
        },
        {
            'name': 'Régularisation d\'IRG 10%',
            'sequence': 571,
            'code': 'R_IRG10',
            'active': True,
            'appears_on_payslip': True,
            'id_regul_rule': True,
            'category_id': instance.env['finn.hr.salary.rule.category'].search([('code','=','DED')],limit=1).id,
            'condition_select': 'python',
            'condition_python': 'result=inputs.R_IRG10 and inputs.R_IRG10.amount or False',
            'amount_select':'percentage',
            'amount_percentage_base': '-inputs.R_IRG10.amount',
            'quantity': '1',
            'amount_percentage': 10,
        },
        {
            'name': 'IRG 15%',
            'sequence': 580,
            'code': 'IRG15',
            'active': True,
            'appears_on_payslip': True,
            'category_id': instance.env['finn.hr.salary.rule.category'].search([('code','=','DED')],limit=1).id,
            'condition_select': 'python',
            'condition_python': 'result= categories.IMP15 or False',
            'amount_select':'percentage',
            'amount_percentage_base': '-categories.IMP15',
            'quantity': '1',
            'amount_percentage': 15,
        },
        {
            'name': 'Régularisation d\'IRG 15%',
            'sequence': 581,
            'code': 'R_IRG15',
            'active': True,
            'appears_on_payslip': True,
            'id_regul_rule': True,
            'category_id': instance.env['finn.hr.salary.rule.category'].search([('code','=','DED')],limit=1).id,
            'condition_select': 'python',
            'condition_python': 'result=inputs.R_IRG15 and inputs.R_IRG15.amount or False',
            'amount_select':'percentage',
            'amount_percentage_base': '-inputs.R_IRG15.amount',
            'quantity': '1',
            'amount_percentage': 100,
        },
        {
            'name': 'Retenue mutuelle',
            'sequence': 560,
            'code': 'RTMU',
            'active': True,
            'appears_on_payslip': True,
            'category_id': instance.env['finn.hr.salary.rule.category'].search([('code','=','DED')],limit=1).id,
            'condition_select': 'python',
            'condition_python': 'result= employee.mutual_restraint or False',
            'amount_select':'code',
            'amount_python_compute': '''result_rate = employee.mutual_percentage
result = -(categories.BASIC + categories.ALW)''',
        },
        {
            'name': 'Régularisation de retenue mutuelle',
            'sequence': 561,
            'code': 'R_RTMU',
            'active': True,
            'appears_on_payslip': True,
            'id_regul_rule': True,
            'category_id': instance.env['finn.hr.salary.rule.category'].search([('code','=','DED')],limit=1).id,
            'condition_select': 'python',
            'condition_python': 'result=inputs.R_RTMU and inputs.R_RTMU.amount or False',
            'amount_select':'percentage',
            'amount_percentage_base': '-inputs.R_RTMU.amount',
            'quantity': '1',
            'amount_percentage': 100,
        },
        {
            'name': 'Frais de deplacement',
            'sequence': 590,
            'code': 'FDEP',
            'active': True,
            'appears_on_payslip': True,
            'category_id': instance.env['finn.hr.salary.rule.category'].search([('code','=','ALW')],limit=1).id,
            'condition_select': 'python',
            'condition_python': 'result=inputs.FDEP and inputs.FDEP.amount or False',
            'amount_select':'percentage',
            'amount_percentage_base': 'inputs.FDEP.amount',
            'quantity': '1',
            'amount_percentage': 100,
        },
        {
            'name': 'Régularisation de frais de deplacement',
            'sequence': 591,
            'code': 'R_FDEP',
            'active': True,
            'appears_on_payslip': True,
            'id_regul_rule': True,
            'category_id': instance.env['finn.hr.salary.rule.category'].search([('code','=','ALW')],limit=1).id,
            'condition_select': 'python',
            'condition_python': 'result=inputs.R_FDEP and inputs.R_FDEP.amount or False',
            'amount_select':'percentage',
            'amount_percentage_base': 'inputs.R_FDEP.amount',
            'quantity': '1',
            'amount_percentage': 100,
        },
        {
            'name': 'Frais de mission',
            'sequence': 600,
            'code': 'FRMS',
            'active': True,
            'appears_on_payslip': True,
            'category_id': instance.env['finn.hr.salary.rule.category'].search([('code','=','ALW')],limit=1).id,
            'condition_select': 'python',
            'condition_python': 'result=inputs.FRMS and inputs.FRMS.amount or False',
            'amount_select':'percentage',
            'amount_percentage_base': 'inputs.FRMS.amount',
            'quantity': '1',
            'amount_percentage': 100,
        },
        {
            'name': 'Régularisation de frais de mission',
            'sequence': 601,
            'code': 'R_FRMS',
            'active': True,
            'appears_on_payslip': True,
            'id_regul_rule': True,
            'category_id': instance.env['finn.hr.salary.rule.category'].search([('code','=','ALW')],limit=1).id,
            'condition_select': 'python',
            'condition_python': 'result=inputs.R_FRMS and inputs.R_FRMS.amount or False',
            'amount_select':'percentage',
            'amount_percentage_base': 'inputs.R_FRMS.amount',
            'quantity': '1',
            'amount_percentage': 100,
        },
        {
            'name': 'Indemnité de véhicule particulier',
            'sequence': 610,
            'code': 'IVP',
            'active': True,
            'appears_on_payslip': True,
            'category_id': instance.env['finn.hr.salary.rule.category'].search([('code','=','IMP')],limit=1).id,
            'condition_select': 'python',
            'condition_python': 'result=inputs.IVP and inputs.IVP.amount or False',
            'amount_select':'percentage',
            'amount_percentage_base': 'inputs.IVP.amount',
            'quantity': 'worked_days.WORK100.number_of_days',
            'amount_percentage': 100,
        },
        {
            'name': 'Régularisation d\'indemnité de véhicule particulier',
            'sequence': 611,
            'code': 'R_IVP',
            'active': True,
            'appears_on_payslip': True,
            'id_regul_rule': True,
            'category_id': instance.env['finn.hr.salary.rule.category'].search([('code','=','IMP')],limit=1).id,
            'condition_select': 'python',
            'condition_python': 'result=inputs.R_IVP and inputs.R_IVP.amount or False',
            'amount_select':'percentage',
            'amount_percentage_base': 'inputs.R_IVP.amount',
            'quantity': '1',
            'amount_percentage': 100,
        },
        {
            'name': 'Indemnité kilométrique',
            'sequence': 620,
            'code': 'IK',
            'active': True,
            'appears_on_payslip': True,
            'category_id': instance.env['finn.hr.salary.rule.category'].search([('code','=','ALW')],limit=1).id,
            'condition_select': 'python',
            'condition_python': 'result=inputs.IK and inputs.IK.amount or False',
            'amount_select':'percentage',
            'amount_percentage_base': 'inputs.IK.amount',
            'quantity': '1',
            'amount_percentage': 100,
        },
        {
            'name': 'Régularisation d\'indemnité kilométrique',
            'sequence': 621,
            'code': 'R_IK',
            'active': True,
            'appears_on_payslip': True,
            'id_regul_rule': True,
            'category_id': instance.env['finn.hr.salary.rule.category'].search([('code','=','ALW')],limit=1).id,
            'condition_select': 'python',
            'condition_python': 'result=inputs.R_IK and inputs.R_IK.amount or False',
            'amount_select':'percentage',
            'amount_percentage_base': 'inputs.R_IK.amount',
            'quantity': '1',
            'amount_percentage': 100,
        },
        {
            'name': 'Frais d\'hébergement',
            'sequence': 630,
            'code': 'HEBR',
            'active': True,
            'appears_on_payslip': True,
            'category_id': instance.env['finn.hr.salary.rule.category'].search([('code','=','ALW')],limit=1).id,
            'condition_select': 'python',
            'condition_python': 'result=inputs.HEBR and inputs.HEBR.amount or False',
            'amount_select':'percentage',
            'amount_percentage_base': 'inputs.HEBR.amount',
            'quantity': '1',
            'amount_percentage': 100,
        },
        {
            'name': 'Régularisation de frais d\'hébergement',
            'sequence': 631,
            'code': 'R_HEBR',
            'active': True,
            'appears_on_payslip': True,
            'id_regul_rule': True,
            'category_id': instance.env['finn.hr.salary.rule.category'].search([('code','=','ALW')],limit=1).id,
            'condition_select': 'python',
            'condition_python': 'result=inputs.R_HEBR and inputs.R_HEBR.amount or False',
            'amount_select':'percentage',
            'amount_percentage_base': 'inputs.R_HEBR.amount',
            'quantity': '1',
            'amount_percentage': 100,
        },
        {
            'name': 'Prime 8 Mars',
            'sequence': 660,
            'code': 'P8M',
            'active': True,
            'appears_on_payslip': True,
            'category_id': instance.env['finn.hr.salary.rule.category'].search([('code','=','ALW')],limit=1).id,
            'condition_select': 'python',
            'condition_python': 'result=inputs.P8M and inputs.P8M.amount or False',
            'amount_select':'percentage',
            'amount_percentage_base': 'inputs.P8M.amount',
            'quantity': '1',
            'amount_percentage': 100,
        },
        {
            'name': 'Régularisation de prime 8 Mars',
            'sequence': 661,
            'code': 'R_P8M',
            'active': True,
            'appears_on_payslip': True,
            'id_regul_rule': True,
            'category_id': instance.env['finn.hr.salary.rule.category'].search([('code','=','ALW')],limit=1).id,
            'condition_select': 'python',
            'condition_python': 'result=inputs.R_P8M and inputs.R_P8M.amount or False',
            'amount_select':'percentage',
            'amount_percentage_base': 'inputs.R_P8M.amount',
            'quantity': '1',
            'amount_percentage': 100,
        },
        {
            'name': 'Indemnité pour salaire unique (IPSU)',
            'sequence': 670,
            'code': 'ISUQ',
            'active': True,
            'appears_on_payslip': True,
            'id_regul_rule': True,
            'category_id': instance.env['finn.hr.salary.rule.category'].search([('code','=','ALW')],limit=1).id,
            'condition_select': 'python',
            'condition_python': 'result=inputs.ISUQ and inputs.ISUQ.amount or False',
            'amount_select':'percentage',
            'amount_percentage_base': 'inputs.ISUQ.amount',
            'quantity': '1',
            'amount_percentage': 100,
        },
        {
            'name': 'Régularisation d\'indemnité pour salaire unique (IPSU)',
            'sequence': 671,
            'code': 'R_ISUQ',
            'active': True,
            'appears_on_payslip': True,
            'category_id': instance.env['finn.hr.salary.rule.category'].search([('code','=','ALW')],limit=1).id,
            'condition_select': 'python',
            'condition_python': 'result=inputs.R_ISUQ and inputs.R_ISUQ.amount or False',
            'amount_select':'percentage',
            'amount_percentage_base': 'inputs.R_ISUQ.amount',
            'quantity': '1',
            'amount_percentage': 100,
        },
        {
            'name': 'Accompte',
            'sequence': 680,
            'code': 'ACOMP',
            'active': True,
            'appears_on_payslip': True,
            'category_id': instance.env['finn.hr.salary.rule.category'].search([('code','=','DED')],limit=1).id,
            'condition_select': 'python',
            'condition_python': 'result=inputs.ACMP and inputs.ACMP.amount or False',
            'amount_select':'fix',
            'quantity': 'inputs.ACMP.amount',
            'amount_fix': 1,
        },
        {
            'name': 'Régularisation Accompte',
            'sequence': 681,
            'code': 'R_ACOMP',
            'active': True,
            'appears_on_payslip': True,
            'id_regul_rule': True,
            'category_id': instance.env['finn.hr.salary.rule.category'].search([('code','=','DED')],limit=1).id,
            'condition_select': 'python',
            'condition_python': 'result=inputs.R_ACMP and inputs.R_ACMP.amount or False',
            'amount_select':'fix',
            'quantity': 'inputs.R_ACMP.amount',
            'amount_fix': 1,
        },
        {
            'name': 'Allocation maternité',
            'sequence': 690,
            'code': 'ALOMAT',
            'active': True,
            'appears_on_payslip': True,
            'category_id': instance.env['finn.hr.salary.rule.category'].search([('code','=','ALW')],limit=1).id,
            'condition_select': 'python',
            'condition_python': 'result=inputs.ALOMAT and inputs.ALOMAT.amount or False',
            'amount_select':'fix',
            'quantity': 'inputs.ALOMAT.amount',
            'amount_percentage': 100,
        },
        {
            'name': 'Régularisation d\'allocation maternité',
            'sequence': 691,
            'code': 'R_ALOMAT',
            'active': True,
            'appears_on_payslip': True,
            'id_regul_rule': True,
            'category_id': instance.env['finn.hr.salary.rule.category'].search([('code','=','ALW')],limit=1).id,
            'condition_select': 'python',
            'condition_python': 'result=inputs.R_ALOMAT and inputs.R_ALOMAT.amount or False',
            'amount_select':'percentage',
            'amount_percentage_base': 'inputs.R_ALOMAT.amount',
            'quantity': '1',
            'amount_percentage': 100,
        },
        {
            'name': 'Prêt',
            'sequence': 700,
            'code': 'PRET',
            'active': True,
            'appears_on_payslip': True,
            'category_id': instance.env['finn.hr.salary.rule.category'].search([('code','=','ALW')],limit=1).id,
            'condition_select': 'python',
            'condition_python': 'result=inputs.PRET and inputs.PRET.amount or False',
            'amount_select':'percentage',
            'amount_percentage_base': 'inputs.PRET.amount',
            'quantity': '1',
            'amount_percentage': 100,
        },
        {
            'name': 'Régularisation de Prêt',
            'sequence': 701,
            'code': 'R_PRET',
            'active': True,
            'appears_on_payslip': True,
            'id_regul_rule': True,
            'category_id': instance.env['finn.hr.salary.rule.category'].search([('code','=','ALW')],limit=1).id,
            'condition_select': 'python',
            'condition_python': 'result=inputs.R_PRET and inputs.R_PRET.amount or False',
            'amount_select':'percentage',
            'amount_percentage_base': 'inputs.R_PRET.amount',
            'quantity': '1',
            'amount_percentage': 100,
        },
        {
            'name': 'Remboursement de prêt',
            'sequence': 710,
            'code': 'REMP',
            'active': True,
            'appears_on_payslip': True,
            'category_id': instance.env['finn.hr.salary.rule.category'].search([('code','=','ALW')],limit=1).id,
            'condition_select': 'python',
            'condition_python': 'result=inputs.REMP and inputs.REMP.amount or False',
            'amount_select':'percentage',
            'amount_percentage_base': '-inputs.REMP.amount',
            'quantity': '1',
            'amount_percentage': 100,
        },
        {
            'name': 'Régularisation de remboursement de prêt',
            'sequence': 711,
            'code': 'R_REMP',
            'active': True,
            'appears_on_payslip': True,
            'id_regul_rule': True,
            'category_id': instance.env['finn.hr.salary.rule.category'].search([('code','=','ALW')],limit=1).id,
            'condition_select': 'python',
            'condition_python': 'result=inputs.R_REMP and inputs.R_REMP.amount or False',
            'amount_select':'percentage',
            'amount_percentage_base': '-inputs.R_REMP.amount',
            'quantity': '1',
            'amount_percentage': 100,
        },
        {
            'name': 'Montant du congé',
            'sequence': 425,
            'code': 'MC',
            'active': True,
            'appears_on_payslip': True,
            'category_id': instance.env['finn.hr.salary.rule.category'].search([('code','=','INTERM')],limit=1).id,
            'condition_select': 'none',
            'amount_select':'percentage',
            'amount_percentage_base': '( categories.BASIC + categories.ALW ) if worked_days.WORK100.number_of_days != 0 else 0',
            'quantity': '1/30',
            'amount_percentage': 250,
        },
        {
            'name': 'Allocation familliale (enfant à 300da)',
            'sequence': 720,
            'code': 'ALOF1',
            'active': True,
            'appears_on_payslip': True,
            'category_id': instance.env['finn.hr.salary.rule.category'].search([('code','=','ALW')],limit=1).id,
            'condition_select': 'python',
            'condition_python': 'result=inputs.ALOF1 and inputs.ALOF1.amount or False',
            'amount_select':'percentage',
            'amount_percentage_base': 'inputs.ALOF1.amount',
            'quantity': '1',
            'amount_percentage': 100,
        },
        {
            'name': 'Régularisation d\'allocation familliale (enfant à 300da))',
            'sequence': 721,
            'code': 'R_ALOF1',
            'active': True,
            'appears_on_payslip': True,
            'id_regul_rule': True,
            'category_id': instance.env['finn.hr.salary.rule.category'].search([('code','=','ALW')],limit=1).id,
            'condition_select': 'python',
            'condition_python': 'result=inputs.R_ALOF1 and inputs.R_ALOF1.amount or False',
            'amount_select':'percentage',
            'amount_percentage_base': 'inputs.R_ALOF1.amount',
            'quantity': '1',
            'amount_percentage': 100,
        },
        {
            'name': 'Allocation familliale (enfant à 600da)',
            'sequence': 730,
            'code': 'ALOF2',
            'active': True,
            'appears_on_payslip': True,
            'category_id': instance.env['finn.hr.salary.rule.category'].search([('code','=','ALW')],limit=1).id,
            'condition_select': 'python',
            'condition_python': 'result=inputs.ALOF2 and inputs.ALOF2.amount or False',
            'amount_select':'percentage',
            'amount_percentage_base': 'inputs.ALOF2.amount',
            'quantity': '1',
            'amount_percentage': 100,
        },
        {
            'name': 'Régularisation d\'allocation familliale (enfant à 600da)',
            'sequence': 731,
            'code': 'R_ALOF2',
            'active': True,
            'appears_on_payslip': True,
            'id_regul_rule': True,
            'category_id': instance.env['finn.hr.salary.rule.category'].search([('code','=','ALW')],limit=1).id,
            'condition_select': 'python',
            'condition_python': 'result=inputs.R_ALOF2 and inputs.R_ALOF2.amount or False',
            'amount_select':'percentage',
            'amount_percentage_base': 'inputs.R_ALOF2.amount',
            'quantity': '1',
            'amount_percentage': 100,
        },
        {
            'name': 'Prime Scolarité',
            'sequence': 740,
            'code': 'PSCL',
            'active': True,
            'appears_on_payslip': True,
            'category_id': instance.env['finn.hr.salary.rule.category'].search([('code','=','ALW')],limit=1).id,
            'condition_select': 'python',
            'condition_python': 'result=inputs.PSCL and inputs.PSCL.amount or False',
            'amount_select':'percentage',
            'amount_percentage_base': 'inputs.PSCL.amount',
            'quantity': '1',
            'amount_percentage': 100,
        },
        {
            'name': 'Régularisation de prime Scolarité',
            'sequence': 741,
            'code': 'R_PSCL',
            'active': True,
            'appears_on_payslip': True,
            'id_regul_rule': True,
            'category_id': instance.env['finn.hr.salary.rule.category'].search([('code','=','ALW')],limit=1).id,
            'condition_select': 'python',
            'condition_python': 'result=inputs.R_PSCL and inputs.R_PSCL.amount or False',
            'amount_select':'percentage',
            'amount_percentage_base': 'inputs.R_PSCL.amount',
            'quantity': '1',
            'amount_percentage': 100,
        },
        {
            'name': 'Indemnité de frais de résidence et d\'isolement',
            'sequence': 750,
            'code': 'IFRI',
            'active': True,
            'appears_on_payslip': True,
            'category_id': instance.env['finn.hr.salary.rule.category'].search([('code','=','ALW')],limit=1).id,
            'condition_select': 'python',
            'condition_python': 'result=inputs.IFRI and inputs.IFRI.amount or False',
            'amount_select':'percentage',
            'amount_percentage_base': 'inputs.IFRI.amount',
            'quantity': 'worked_days.WORK100.number_of_days',
            'amount_percentage': 100,
        },
        {
            'name': 'Régularisation d\'indemnité de frais de résidence et d\'isolement',
            'sequence': 751,
            'code': 'R_IFRI',
            'active': True,
            'appears_on_payslip': True,
            'id_regul_rule': True,
            'category_id': instance.env['finn.hr.salary.rule.category'].search([('code','=','ALW')],limit=1).id,
            'condition_select': 'python',
            'condition_python': 'result=inputs.R_IFRI and inputs.R_IFRI.amount or False',
            'amount_select':'percentage',
            'amount_percentage_base': 'inputs.R_IFRI.amount',
            'quantity': '1',
            'amount_percentage': 100,
        },
        {
            'name': 'Indemnité de zone et de conditions de vie',
            'sequence': 760,
            'code': 'IZCV',
            'active': True,
            'appears_on_payslip': True,
            'category_id': instance.env['finn.hr.salary.rule.category'].search([('code','=','ALW')],limit=1).id,
            'condition_select': 'python',
            'condition_python': 'result=inputs.IZCV and inputs.IZCV.amount or False',
            'amount_select':'percentage',
            'amount_percentage_base': 'inputs.IZCV.amount',
            'quantity': 'worked_days.WORK100.number_of_days',
            'amount_percentage': 100,
        },
        {
            'name': 'Régularisation d\'indemnité de zone et de conditions de vie',
            'sequence': 761,
            'code': 'R_IZCV',
            'active': True,
            'appears_on_payslip': True,
            'id_regul_rule': True,
            'category_id': instance.env['finn.hr.salary.rule.category'].search([('code','=','ALW')],limit=1).id,
            'condition_select': 'python',
            'condition_python': 'result=inputs.R_IZCV and inputs.R_IZCV.amount or False',
            'amount_select':'percentage',
            'amount_percentage_base': 'inputs.R_IZCV.amount',
            'quantity': 'worked_days.WORK100.number_of_days',
            'amount_percentage': 100,
        },
        {
            'name': 'Indemnité de zone géographique 1 (hauts plateaux)',
            'sequence': 770,
            'code': 'ZONE1',
            'active': True,
            'appears_on_payslip': True,
            'category_id': instance.env['finn.hr.salary.rule.category'].search([('code','=','ALW')],limit=1).id,
            'condition_select': 'python',
            'condition_python': 'result=inputs.ZONE1 and inputs.ZONE1.amount or False',
            'amount_select':'percentage',
            'amount_percentage_base': 'inputs.ZONE1.amount',
            'quantity': 'worked_days.WORK100.number_of_days',
            'amount_percentage': 100,
        },
        {
            'name': 'Régularisation d\'indemnité de zone géographique 1 (hauts plateaux)',
            'sequence': 771,
            'code': 'R_ZONE1',
            'active': True,
            'appears_on_payslip': True,
            'id_regul_rule': True,
            'category_id': instance.env['finn.hr.salary.rule.category'].search([('code','=','ALW')],limit=1).id,
            'condition_select': 'python',
            'condition_python': 'result=inputs.R_ZONE1 and inputs.R_ZONE1.amount or False',
            'amount_select':'percentage',
            'amount_percentage_base': 'inputs.R_ZONE1.amount',
            'quantity': '1',
            'amount_percentage': 100,
        },
        {
            'name': 'Indemnité de zone géographique 2 (sud)',
            'sequence': 780,
            'code': 'ZONE2',
            'active': True,
            'appears_on_payslip': True,
            'category_id': instance.env['finn.hr.salary.rule.category'].search([('code','=','ALW')],limit=1).id,
            'condition_select': 'python',
            'condition_python': 'result=inputs.ZONE2 and inputs.ZONE2.amount or False',
            'amount_select':'percentage',
            'amount_percentage_base': 'inputs.ZONE2.amount',
            'quantity': 'worked_days.WORK100.number_of_days',
            'amount_percentage': 100,
        },
        {
            'name': 'Régularisation d\'indemnité de zone géographique 2 (sud)',
            'sequence': 781,
            'code': 'R_ZONE2',
            'active': True,
            'appears_on_payslip': True,
            'id_regul_rule': True,
            'category_id': instance.env['finn.hr.salary.rule.category'].search([('code','=','ALW')],limit=1).id,
            'condition_select': 'python',
            'condition_python': 'result=inputs.R_ZONE2 and inputs.R_ZONE2.amount or False',
            'amount_select':'percentage',
            'amount_percentage_base': 'inputs.R_ZONE2.amount',
            'quantity': '1',
            'amount_percentage': 100,
        },
        {
            'name': 'Indemnité de licenciement',
            'sequence': 790,
            'code': 'LICEN',
            'active': True,
            'appears_on_payslip': True,
            'category_id': instance.env['finn.hr.salary.rule.category'].search([('code','=','ALW')],limit=1).id,
            'condition_select': 'python',
            'condition_python': 'esult=inputs.LICEN and inputs.LICEN.amount or False',
            'amount_select':'percentage',
            'amount_percentage_base': 'inputs.LICEN.amount',
            'quantity': '1',
            'amount_percentage': 100,
        },
        {
            'name': 'Régularisation d\'indemnité de licenciement',
            'sequence': 791,
            'code': 'R_LICEN',
            'active': True,
            'appears_on_payslip': True,
            'id_regul_rule': True,
            'category_id': instance.env['finn.hr.salary.rule.category'].search([('code','=','ALW')],limit=1).id,
            'condition_select': 'python',
            'condition_python': 'esult=inputs.R_LICEN and inputs.R_LICEN.amount or False',
            'amount_select':'percentage',
            'amount_percentage_base': 'inputs.R_LICEN.amount',
            'quantity': '1',
            'amount_percentage': 100,
        },
        {
            'name': 'Allocation chômage',
            'sequence': 800,
            'code': 'CHOM',
            'active': True,
            'appears_on_payslip': True,
            'category_id': instance.env['finn.hr.salary.rule.category'].search([('code','=','ALW')],limit=1).id,
            'condition_select': 'python',
            'condition_python': 'esult=inputs.CHOM and inputs.CHOM.amount or False',
            'amount_select':'percentage',
            'amount_percentage_base': 'inputs.CHOM.amount',
            'quantity': '1',
            'amount_percentage': 100,
        },
        {
            'name': 'Régularisation d\'allocation chômage',
            'sequence': 801,
            'code': 'R_CHOM',
            'active': True,
            'appears_on_payslip': True,
            'id_regul_rule': True,
            'category_id': instance.env['finn.hr.salary.rule.category'].search([('code','=','ALW')],limit=1).id,
            'condition_select': 'python',
            'condition_python': 'esult=inputs.R_CHOM and inputs.R_CHOM.amount or False',
            'amount_select':'percentage',
            'amount_percentage_base': 'inputs.R_CHOM.amount',
            'quantity': '1',
            'amount_percentage': 100,
        },
        {
            'name': 'Salaire Brut',
            'sequence': 900,
            'code': 'GROSS',
            'active': True,
            'appears_on_payslip': True,
            'category_id': instance.env['finn.hr.salary.rule.category'].search([('code','=','GROSS')],limit=1).id,
            'condition_select': 'none',
            'amount_select':'percentage',
            'amount_percentage_base': 'categories.BASIC + categories.ALW',
            'quantity': '1',
            'amount_percentage': 100,
        },
        {
            'name': 'Salaire Net',
            'sequence': 900,
            'code': 'NET',
            'active': True,
            'appears_on_payslip': True,
            'category_id': instance.env['finn.hr.salary.rule.category'].search([('code','=','NET')],limit=1).id,
            'condition_select': 'none',
            'amount_select':'percentage',
            'amount_percentage_base': 'categories.BASIC + categories.ALW + categories.DED',
            'quantity': '1',
            'amount_percentage': 100,
        },
        {
            'name': 'Temps de travail en jour (mensuel)',
            'sequence': 111,
            'code': 'TTJM',
            'active': False,
            'appears_on_payslip': True,
            'category_id': instance.env['finn.hr.salary.rule.category'].search([('code','=','INTERM')],limit=1).id,
            'condition_select': 'none',
            'amount_select':'code',
            'amount_python_compute': 'result = contract.base_mois - ( worked_days.ABS.number_of_days if worked_days.ABS else 0 ) - ( worked_days.ABSH.number_of_hours if worked_days.ABSH else 0 ) / categories.HJ',
        },
        {
            'name': 'Temps de travail en jour (jour)',
            'sequence': 112,
            'code': 'TTJJ',
            'active': False,
            'appears_on_payslip': True,
            'category_id': instance.env['finn.hr.salary.rule.category'].search([('code','=','INTERM')],limit=1).id,
            'condition_select': 'none',
            'amount_select':'code',
            'amount_python_compute': 'result = worked_days.WORK100.number_of_days + ( worked_days.CP.number_of_days if worked_days.CP else 0 )',
        },
        {
            'name': 'Temps de travail en heures (mensuel)',
            'sequence': 113,
            'code': 'TTHM',
            'active': False,
            'appears_on_payslip': True,
            'category_id': instance.env['finn.hr.salary.rule.category'].search([('code','=','INTERM')],limit=1).id,
            'condition_select': 'none',
            'amount_select':'code',
            'amount_python_compute': 'result = 173.33 - ( worked_days.ABS.number_of_days if worked_days.ABS else 0 ) * categories.HJ - ( worked_days.ABSH.number_of_hours if worked_days.ABSH else 0 )',
        },
        {
            'name': 'Temps de travail en heures (jour)',
            'sequence': 114,
            'code': 'TTHJ',
            'active': False,
            'appears_on_payslip': True,
            'category_id': instance.env['finn.hr.salary.rule.category'].search([('code','=','INTERM')],limit=1).id,
            'condition_select': 'none',
            'amount_select':'code',
            'amount_python_compute': 'result = worked_days.WORK100.number_of_days * categories.HJ + ( worked_days.CP.number_of_days if worked_days.CP else 0 ) * categories.HJ',
        },
        {
            'name': 'Temps de travail en heures (heure)',
            'sequence': 115,
            'code': 'TTHH',
            'active': False,
            'appears_on_payslip': True,
            'category_id': instance.env['finn.hr.salary.rule.category'].search([('code','=','INTERM')],limit=1).id,
            'condition_select': 'none',
            'amount_select':'code',
            'amount_python_compute': 'result =  worked_days.WORK100.number_of_hours + ( worked_days.CP.number_of_days if worked_days.CP else 0 ) * categories.HJ',
        },
        {
            'name': 'Prime de rendement collectif',
            'sequence': 450,
            'code': 'PRC',
            'active': True,
            'appears_on_payslip': True,
            'category_id': instance.env['finn.hr.salary.rule.category'].search([('code','=','IMP')],limit=1).id,
            'condition_select': 'python',
            'condition_python': 'result=inputs.PRC and inputs.PRC.amount or False',
            'amount_select':'percentage',
            'amount_percentage_base': 'inputs.PRC.amount',
            'quantity': '1',
            'amount_percentage': 100,
        },
        {
            'name': 'Régularisation de prime de rendement collectif',
            'sequence': 451,
            'code': 'R_PRC',
            'active': True,
            'appears_on_payslip': True,
            'id_regul_rule': True,
            'category_id': instance.env['finn.hr.salary.rule.category'].search([('code','=','IMP')],limit=1).id,
            'condition_select': 'python',
            'condition_python': 'result=inputs.R_PRC and inputs.R_PRC.amount or False',
            'amount_select':'percentage',
            'amount_percentage_base': 'inputs.R_PRC.amount',
            'quantity': '1',
            'amount_percentage': 100,
        },
        {
            'name': 'IRG Consultant',
            'sequence': 540,
            'code': 'IRGC',
            'active': True,
            'appears_on_payslip': True,
            'category_id': instance.env['finn.hr.salary.rule.category'].search([('code','=','DED')],limit=1).id,
            'condition_select': 'range',
            'condition_range': 'contract.wage',
            'condition_range_min': 18000,
            'condition_range_max': 9999999999999,
            'amount_select':'percentage',
            'amount_percentage_base': '-((categories.BASIC + categories.COT + categories.DED + categories.IMP) / 10 ) * 10',
            'quantity': '1',
            'amount_percentage': 15,
        },
        {
            'name': 'Régularisation d\'IRG Consultant',
            'sequence': 542,
            'code': 'R_IRGC',
            'active': True,
            'appears_on_payslip': True,
            'id_regul_rule': True,
            'category_id': instance.env['finn.hr.salary.rule.category'].search([('code','=','DED')],limit=1).id,
            'condition_select': 'python',
            'condition_python': 'result=inputs.R_IRGC and inputs.R_IRGC.amount or False',
            'amount_select':'percentage',
            'amount_percentage_base': 'inputs.R_IRGC.amount',
            'quantity': '1',
            'amount_percentage': 100,
        },
        {
            'name': 'Prime Éxceptionnelle',
            'sequence': 490,
            'code': 'EXEP',
            'active': True,
            'appears_on_payslip': True,
            'category_id': instance.env['finn.hr.salary.rule.category'].search([('code','=','IMP10')],limit=1).id,
            'condition_select': 'python',
            'condition_python': 'result=inputs.EXEP and inputs.EXEP.amount or False',
            'amount_select':'percentage',
            'amount_percentage_base': 'inputs.EXEP.amount',
            'quantity': '1',
            'amount_percentage': 100,
        },
        {
            'name': 'Régularisation de prime Éxceptionnelle',
            'sequence': 491,
            'code': 'R_EXEP',
            'active': True,
            'appears_on_payslip': True,
            'id_regul_rule': True,
            'category_id': instance.env['finn.hr.salary.rule.category'].search([('code','=','IMP10')],limit=1).id,
            'condition_select': 'python',
            'condition_python': 'result=inputs.R_EXEP and inputs.R_EXEP.amount or False',
            'amount_select':'percentage',
            'amount_percentage_base': 'inputs.R_EXEP.amount',
            'quantity': '1',
            'amount_percentage': 100,
        },
        {
            'name': 'Allocation salarié de nationalité étrangère',
            'sequence': 650,
            'code': 'ETRG',
            'active': True,
            'appears_on_payslip': True,
            'category_id': instance.env['finn.hr.salary.rule.category'].search([('code','=','ALW')],limit=1).id,
            'condition_select': 'python',
            'condition_python': 'result=inputs.ETRG and inputs.ETRG.amount or False',
            'amount_select':'percentage',
            'amount_percentage_base': 'inputs.ETRG.amount',
            'quantity': 'worked_days.WORK100.number_of_days',
            'amount_percentage': 100,
        },
        {
            'name': 'Régularisation d\'allocation salarié de nationalité étrangère',
            'sequence': 651,
            'code': 'R_ETRG',
            'active': True,
            'appears_on_payslip': True,
            'id_regul_rule': True,
            'category_id': instance.env['finn.hr.salary.rule.category'].search([('code','=','ALW')],limit=1).id,
            'condition_select': 'python',
            'condition_python': 'result=inputs.R_ETRG and inputs.R_ETRG.amount or False',
            'amount_select':'percentage',
            'amount_percentage_base': 'inputs.R_ETRG.amount',
            'quantity': '1',
            'amount_percentage': 100,
        },
        {
            'name': 'Régularisation de salaire de base',
            'sequence': 11,
            'code': 'R_BASE',
            'active': True,
            'appears_on_payslip': True,
            'id_regul_rule': True,
            'category_id': instance.env['finn.hr.salary.rule.category'].search([('code','=','BASIC')],limit=1).id,
            'condition_select': 'python',
            'condition_python': 'result=inputs.R_BASE and inputs.R_BASE.amount or False',
            'amount_select':'percentage',
            'amount_percentage_base': 'inputs.R_BASE.amount',
            'quantity': '1',
            'amount_percentage': 100,
        },
        {
            'name': 'Régularisation d\'absence jours',
            'sequence': 81,
            'code': 'R_ABS',
            'active': True,
            'appears_on_payslip': True,
            'id_regul_rule': True,
            'category_id': instance.env['finn.hr.salary.rule.category'].search([('code','=','BASIC')],limit=1).id,
            'condition_select': 'python',
            'condition_python': 'result=inputs.R_ABS and inputs.R_ABS.amount or False',
            'amount_select':'percentage',
            'amount_percentage_base': 'inputs.R_ABS.amount',
            'quantity': '1',
            'amount_percentage': 100,
        },
        {
            'name': 'Régularisation d\'absence heures',
            'sequence': 91,
            'code': 'R_ABSH',
            'active': True,
            'appears_on_payslip': True,

            'category_id': instance.env['finn.hr.salary.rule.category'].search([('code','=','BASIC')],limit=1).id,
            'condition_select': 'python',
            'condition_python': 'result=inputs.R_ABSH and inputs.R_ABSH.amount or False',
            'amount_select':'percentage',
            'amount_percentage_base': 'inputs.R_ABSH.amount',
            'quantity': '1',
            'amount_percentage': 100,
        },
        {
            'name': 'Régularisation de congé impayé',
            'sequence': 93,
            'code': 'R_IM',
            'active': True,
            'appears_on_payslip': True,
            'id_regul_rule': True,
            'category_id': instance.env['finn.hr.salary.rule.category'].search([('code','=','BASIC')],limit=1).id,
            'condition_select': 'python',
            'condition_python': 'result=inputs.R_IM and inputs.R_IM.amount or False',
            'amount_select':'percentage',
            'amount_percentage_base': 'inputs.R_IM.amount',
            'quantity': '1',
            'amount_percentage': 100,
        },
        {
            'name': 'Régularisation de congé maladie',
            'sequence': 111,
            'code': 'R_CM',
            'active': True,
            'appears_on_payslip': True,
            'id_regul_rule': True,
            'category_id': instance.env['finn.hr.salary.rule.category'].search([('code','=','BASIC')],limit=1).id,
            'condition_select': 'python',
            'condition_python': 'result=inputs.R_CM and inputs.R_CM.amount or False',
            'amount_select':'percentage',
            'amount_percentage_base': 'inputs.R_CM.amount',
            'quantity': '1',
            'amount_percentage': 100,
        },
        {
            'name': 'Régularisation de congé maternité',
            'sequence': 121,
            'code': 'R_CMM',
            'active': True,
            'appears_on_payslip': True,
            'id_regul_rule': True,
            'category_id': instance.env['finn.hr.salary.rule.category'].search([('code','=','BASIC')],limit=1).id,
            'condition_select': 'python',
            'condition_python': 'result=inputs.R_CMM and inputs.R_CMM.amount or False',
            'amount_select':'percentage',
            'amount_percentage_base': 'inputs.R_CMM.amount',
            'quantity': '1',
            'amount_percentage': 100,
        },
        {
            'name': 'Régularisation de l\'IEP',
            'sequence': 141,
            'code': 'R_IEP',
            'active': True,
            'appears_on_payslip': True,
            'id_regul_rule': True,
            'category_id': instance.env['finn.hr.salary.rule.category'].search([('code','=','COT')],limit=1).id,
            'condition_select': 'python',
            'condition_python': 'result=inputs.R_IEP and inputs.R_IEP.amount or False',
            'amount_select':'percentage',
            'amount_percentage_base': 'inputs.R_IEP.amount',
            'quantity': '1',
            'amount_percentage': 100,
        },
        {
            'name': 'Régularisation de prime de responsabilité',
            'sequence': 151,
            'code': 'R_PR',
            'active': True,
            'appears_on_payslip': True,
            'id_regul_rule': True,
            'category_id': instance.env['finn.hr.salary.rule.category'].search([('code','=','COT')],limit=1).id,
            'condition_select': 'python',
            'condition_python': 'result=inputs.R_PR and inputs.R_PR.amount or False',
            'amount_select':'percentage',
            'amount_percentage_base': 'inputs.R_PR.amount',
            'quantity': '1',
            'amount_percentage': 100,
        },
        {
            'name': 'Régularisation de prime de nuisance',
            'sequence': 161,
            'code': 'R_NUIS',
            'active': True,
            'appears_on_payslip': True,
            'id_regul_rule': True,
            'category_id': instance.env['finn.hr.salary.rule.category'].search([('code','=','COT')],limit=1).id,
            'condition_select': 'python',
            'condition_python': 'result=inputs.R_NUIS and inputs.R_NUIS.amount or False',
            'amount_select':'percentage',
            'amount_percentage_base': 'inputs.R_NUIS.amount',
            'quantity': '1',
            'amount_percentage': 100,
        },
        {
            'name': 'Régularisation de prime de danger',
            'sequence': 171,
            'code': 'R_DANG',
            'active': True,
            'appears_on_payslip': True,
            'id_regul_rule': True,
            'category_id': instance.env['finn.hr.salary.rule.category'].search([('code','=','COT')],limit=1).id,
            'condition_select': 'python',
            'condition_python': 'result=inputs.R_DANG and inputs.R_DANG.amount or False',
            'amount_select':'percentage',
            'amount_percentage_base': 'inputs.R_DANG.amount',
            'quantity': '1',
            'amount_percentage': 100,
        },
        {
            'name': 'Régularisation de prime de rendement individuel',
            'sequence': 181,
            'code': 'R_PRI',
            'active': True,
            'appears_on_payslip': True,
            'id_regul_rule': True,
            'category_id': instance.env['finn.hr.salary.rule.category'].search([('code','=','COT')],limit=1).id,
            'condition_select': 'python',
            'condition_python': 'result=inputs.R_PRI and inputs.R_PRI.amount or False',
            'amount_select':'percentage',
            'amount_percentage_base': 'inputs.R_PRI.amount',
            'quantity': '1',
            'amount_percentage': 100,
        },
        {
            'name': 'Régularisation \'indemnité de changement de résidence',
            'sequence': 191,
            'code': 'R_ICR',
            'active': True,
            'appears_on_payslip': True,
            'id_regul_rule': True,
            'category_id': instance.env['finn.hr.salary.rule.category'].search([('code','=','COT')],limit=1).id,
            'condition_select': 'python',
            'condition_python': 'result=inputs.R_ICR and inputs.R_ICR.amount or False',
            'amount_select':'percentage',
            'amount_percentage_base': 'inputs.R_ICR.amount',
            'quantity': '1',
            'amount_percentage': 100,
        },
        {
            'name': 'Régularisation de congé payé',
            'sequence': 201,
            'code': 'R_CP',
            'active': True,
            'appears_on_payslip': True,
            'id_regul_rule': True,
            'category_id': instance.env['finn.hr.salary.rule.category'].search([('code','=','COT')],limit=1).id,
            'condition_select': 'python',
            'condition_python': 'result=inputs.R_CP and inputs.R_CP.amount or False',
            'amount_select':'percentage',
            'amount_percentage_base': 'inputs.R_CP.amount',
            'quantity': '1',
            'amount_percentage': 100,
        },
        {
            'name': 'Régularisation des HEURES SUP 50%',
            'sequence': 261,
            'code': 'R_HS50',
            'active': True,
            'appears_on_payslip': True,
            'id_regul_rule': True,
            'category_id': instance.env['finn.hr.salary.rule.category'].search([('code','=','COT')],limit=1).id,
            'condition_select': 'python',
            'condition_python': 'result=inputs.R_HS50 and inputs.R_HS50.amount or False',
            'amount_select':'percentage',
            'amount_percentage_base': 'inputs.R_HS50.amount',
            'quantity': '1',
            'amount_percentage': 100,
        },
        {
            'name': 'Régularisation des HEURES SUP 75%',
            'sequence': 271,
            'code': 'R_HS75',
            'active': True,
            'appears_on_payslip': True,
            'id_regul_rule': True,
            'category_id': instance.env['finn.hr.salary.rule.category'].search([('code','=','COT')],limit=1).id,
            'condition_select': 'python',
            'condition_python': 'result=inputs.R_HS75 and inputs.R_HS75.amount or False',
            'amount_select':'percentage',
            'amount_percentage_base': 'inputs.R_HS75.amount',
            'quantity': '1',
            'amount_percentage': 100,
        },
        {
            'name': 'Régularisation des HEURES SUP 100%',
            'sequence': 281,
            'code': 'R_HS100',
            'active': True,
            'appears_on_payslip': True,
            'id_regul_rule': True,
            'category_id': instance.env['finn.hr.salary.rule.category'].search([('code','=','COT')],limit=1).id,
            'condition_select': 'python',
            'condition_python': 'result=inputs.R_HS100 and inputs.R_HS100.amount or False',
            'amount_select':'percentage',
            'amount_percentage_base': 'inputs.R_HS100.amount',
            'quantity': '1',
            'amount_percentage': 100,
        },
        {
            'name': 'Régularisation d\'indemnité de congé',
            'sequence': 291,
            'code': 'R_INDC',
            'active': True,
            'appears_on_payslip': True,
            'id_regul_rule': True,
            'category_id': instance.env['finn.hr.salary.rule.category'].search([('code','=','COT')],limit=1).id,
            'condition_select': 'python',
            'condition_python': 'result=inputs.R_INDC and inputs.R_INDC.amount or False',
            'amount_select':'percentage',
            'amount_percentage_base': 'inputs.R_INDC.amount',
            'quantity': '1',
            'amount_percentage': 100,
        },
        {
            'name': 'Régularisation de l\'IFSP',
            'sequence': 301,
            'code': 'R_IFSP',
            'active': True,
            'appears_on_payslip': True,
            'id_regul_rule': True,
            'category_id': instance.env['finn.hr.salary.rule.category'].search([('code','=','COT')],limit=1).id,
            'condition_select': 'python',
            'condition_python': 'result=inputs.R_IFSP and inputs.R_IFSP.amount or False',
            'amount_select':'percentage',
            'amount_percentage_base': 'inputs.R_IFSP.amount',
            'quantity': '1',
            'amount_percentage': 100,
        },
        {
            'name': 'Régularisation de l\'IFS',
            'sequence': 311,
            'code': 'R_IFS',
            'active': True,
            'appears_on_payslip': True,
            'id_regul_rule': True,
            'category_id': instance.env['finn.hr.salary.rule.category'].search([('code','=','COT')],limit=1).id,
            'condition_select': 'python',
            'condition_python': 'result=inputs.R_IFS and inputs.R_IFS.amount or False',
            'amount_select':'percentage',
            'amount_percentage_base': 'inputs.R_IFS.amount',
            'quantity': '1',
            'amount_percentage': 100,
        },
        {
            'name': 'Régularisation d\'indemnité travail posté à 10% (05h à 21h)',
            'sequence': 321,
            'code': 'R_TRPST10',
            'active': True,
            'appears_on_payslip': True,
            'id_regul_rule': True,
            'category_id': instance.env['finn.hr.salary.rule.category'].search([('code','=','COT')],limit=1).id,
            'condition_select': 'python',
            'condition_python': 'result=inputs.R_TRPST10 and inputs.R_TRPST10.amount or False',
            'amount_select':'percentage',
            'amount_percentage_base': 'inputs.R_TRPST10.amount',
            'quantity': '1',
            'amount_percentage': 100,
        },
        {
            'name': 'Régularisation d\'indemnité travail posté à 10% + 5% (21h à 00h)',
            'sequence': 331,
            'code': 'R_TRPST15',
            'active': True,
            'appears_on_payslip': True,
            'id_regul_rule': True,
            'category_id': instance.env['finn.hr.salary.rule.category'].search([('code','=','COT')],limit=1).id,
            'condition_select': 'python',
            'condition_python': 'result=inputs.R_TRPST15 and inputs.R_TRPST15.amount or False',
            'amount_select':'percentage',
            'amount_percentage_base': 'inputs.R_TRPST15.amount',
            'quantity': '1',
            'amount_percentage': 100,
        },
        {
            'name': 'Régularisation d\'indemnité travail posté à 10% + 15% (00h à 15h)',
            'sequence': 341,
            'code': 'R_TRPST25',
            'active': True,
            'appears_on_payslip': True,
            'id_regul_rule': True,
            'category_id': instance.env['finn.hr.salary.rule.category'].search([('code','=','COT')],limit=1).id,
            'condition_select': 'python',
            'condition_python': 'result=inputs.R_TRPST25 and inputs.R_TRPST25.amount or False',
            'amount_select':'percentage',
            'amount_percentage_base': 'inputs.R_TRPST25.amount',
            'quantity': '1',
            'amount_percentage': 100,
        },
        {
            'name': 'Régularisation d\'astreinte et de disponibilité permenenant',
            'sequence': 351,
            'code': 'R_ASTR',
            'active': True,
            'appears_on_payslip': True,
            'id_regul_rule': True,
            'category_id': instance.env['finn.hr.salary.rule.category'].search([('code','=','COT')],limit=1).id,
            'condition_select': 'python',
            'condition_python': 'result=inputs.R_ASTR and inputs.R_ASTR.amount or False',
            'amount_select':'percentage',
            'amount_percentage_base': 'inputs.R_ASTR.amount',
            'quantity': '1',
            'amount_percentage': 100,
        },
        {
            'name': 'Régularisation d\'indemnité des activités d\'enseignement',
            'sequence': 361,
            'code': 'R_ENSG',
            'active': True,
            'appears_on_payslip': True,
            'id_regul_rule': True,
            'category_id': instance.env['finn.hr.salary.rule.category'].search([('code','=','COT')],limit=1).id,
            'condition_select': 'python',
            'condition_python': 'result=inputs.R_ENSG and inputs.R_ENSG.amount or False',
            'amount_select':'percentage',
            'amount_percentage_base': 'inputs.R_ENSG.amount',
            'quantity': '1',
            'amount_percentage': 100,
        },
        {
            'name': 'Régularisation d\'indemnité de gestion et de responsabilité',
            'sequence': 371,
            'code': 'R_GESRES',
            'active': True,
            'appears_on_payslip': True,
            'id_regul_rule': True,
            'category_id': instance.env['finn.hr.salary.rule.category'].search([('code','=','COT')],limit=1).id,
            'condition_select': 'python',
            'condition_python': 'result=inputs.R_GESRES and inputs.R_GESRES.amount or False',
            'amount_select':'percentage',
            'amount_percentage_base': 'inputs.R_GESRES.amount',
            'quantity': '1',
            'amount_percentage': 100,
        }

    ]

    return vals_hr_salary_ruels